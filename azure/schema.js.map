{"version":3,"sources":["../server/schema.js"],"names":["searchTaxItems","_setupData","Array","_","index","tmp","keyword","id","title","description","_searchTaxItems","filter","e","globalId","split","type","find","Number","GraphQLSearchTaxItem","nodeInterface","nodeField","name","fields","resolve","obj","interfaces","nodeType","SearchTaxItemsConnection","connectionType","GraphQLSearchTaxItemEdge","edgeType","GraphQLUser","searchTaxClass","args","defaultValue","Query","viewer","node","schema","query"],"mappings":"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","file":"schema.js","sourcesContent":["import {\n    GraphQLBoolean,\n    GraphQLID,\n    GraphQLInt,\n    GraphQLList,\n    GraphQLNonNull,\n    GraphQLObjectType,\n    GraphQLSchema,\n    GraphQLString,\n} from 'graphql';\n\nimport {\n    connectionArgs,\n    connectionDefinitions,\n    connectionFromArray,\n    cursorForObjectInConnection,\n    fromGlobalId,\n    globalIdField,\n    mutationWithClientMutationId,\n    nodeDefinitions,\n    toGlobalId,\n} from 'graphql-relay';\n\nlet searchTaxItems;\n\n(function _setupData() {\n    searchTaxItems = Array.from(Array(120), (_, index) => {\n        const tmp = index % 3;\n        let keyword;\n        switch (tmp) {\n            case 0:\n                keyword = 'apple';\n                break;\n            case 1:\n                keyword = 'banana';\n                break;\n            case 2:\n                keyword = 'oringe';\n                break;\n        }\n        return {\n            id: index,\n            title: `title:${index}`,\n            description: `description:${index}`,\n            keyword\n        }\n    })\n\n})();\n\nconst _searchTaxItems = keyword => {\n    if (!keyword) {\n        return searchTaxItems;\n    }\n    return searchTaxItems.filter(e => e.keyword === keyword);\n}\n\nconst {nodeInterface, nodeField} = nodeDefinitions(\n    globalId => {\n        const [type, id] = globalId.split(':');\n        return searchTaxItems.find(e => e.id === Number(id));\n    },\n    obj => GraphQLSearchTaxItem\n);\n\nconst GraphQLSearchTaxItem = new GraphQLObjectType({\n    name: 'SearchTaxItem',\n    fields: {\n        id: {\n            type: new GraphQLNonNull(GraphQLID),\n            resolve: (obj) => 'SearchTaxItem:' + obj.id,\n        },\n        title: {\n            type: GraphQLString,\n            resolve: (obj) => obj.title,\n        },\n        description: {\n            type: GraphQLString,\n            resolve: (obj) => obj.description,\n        },\n        keyword: {\n            type: GraphQLString\n        },\n    },\n    interfaces: [nodeInterface],\n});\n\nconst {\n    connectionType: SearchTaxItemsConnection,\n    edgeType: GraphQLSearchTaxItemEdge,\n} = connectionDefinitions({\n    name: 'SearchTaxItem',\n    nodeType: GraphQLSearchTaxItem,\n});\n\nconst GraphQLUser = new GraphQLObjectType({\n    name: 'User',\n    fields: {\n        id: { // every GraphqlObjectType need an 'id' field to generate __dataId \n            type: new GraphQLNonNull(GraphQLID),\n            resolve:_=>'user:0',\n        },\n        searchTaxClass: {\n            type: SearchTaxItemsConnection,\n            args: {\n                keyword: {\n                    type: GraphQLString,\n                    defaultValue: '',\n                },\n                ...connectionArgs,\n            },\n            resolve: (obj, {keyword, ...args}) =>\n                connectionFromArray(_searchTaxItems(keyword), args),\n        },\n    }\n});\n\nconst Query = new GraphQLObjectType({\n    name: 'Query',\n    fields: {\n        viewer: {\n            type: GraphQLUser,\n            resolve: () => ({}),\n        },\n        node: nodeField,\n    },\n});\n\nexport const schema = new GraphQLSchema({\n    query: Query\n});"]}
{"version":3,"sources":["../server/schema.js"],"names":["searchTaxItems","_setupData","Array","_","index","tmp","keyword","id","title","description","_searchTaxItems","filter","e","globalId","type","find","Number","GraphQLSearchTaxItem","nodeInterface","nodeField","name","fields","resolve","obj","interfaces","nodeType","SearchTaxItemsConnection","connectionType","GraphQLSearchTaxItemEdge","edgeType","GraphQLUser","searchTaxClass","args","defaultValue","Query","viewer","node","schema","query"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAWA;;;;AAYA,IAAIA,uBAAJ;;AAEA,CAAC,SAASC,UAAT,GAAsB;AACnBD,qBAAiB,oBAAWE,MAAM,EAAN,CAAX,EAAsB,UAACC,CAAD,EAAIC,KAAJ,EAAc;AACjD,YAAMC,MAAMD,QAAQ,CAApB;AACA,YAAIE,gBAAJ;AACA,gBAAQD,GAAR;AACI,iBAAK,CAAL;AACIC,0BAAU,OAAV;AACA;AACJ,iBAAK,CAAL;AACIA,0BAAU,QAAV;AACA;AACJ,iBAAK,CAAL;AACIA,0BAAU,QAAV;AACA;AATR;AAWA,eAAO;AACHC,gBAAIH,KADD;AAEHI,8BAAgBJ,KAFb;AAGHK,0CAA4BL,KAHzB;AAIHE;AAJG,SAAP;AAMH,KApBgB,CAAjB;AAsBH,CAvBD;;AAyBA,IAAMI,kBAAkB,SAAlBA,eAAkB,UAAW;AAC/B,QAAI,CAACJ,OAAL,EAAc;AACV,eAAON,cAAP;AACH;AACD,WAAOA,eAAeW,MAAf,CAAsB;AAAA,eAAKC,EAAEN,OAAF,KAAcA,OAAnB;AAAA,KAAtB,CAAP;AACH,CALD;;uBAOmC,mCAC/B,oBAAY;AAAA,wBACW,gCAAaO,QAAb,CADX;AAAA,QACDC,IADC,iBACDA,IADC;AAAA,QACKP,EADL,iBACKA,EADL;;AAER,WAAOP,eAAee,IAAf,CAAoB;AAAA,eAAKH,EAAEL,EAAF,KAASS,OAAOT,EAAP,CAAd;AAAA,KAApB,CAAP;AACH,CAJ8B,EAK/B;AAAA,WAAOU,oBAAP;AAAA,CAL+B,C;IAA5BC,a,oBAAAA,a;IAAeC,S,oBAAAA,S;;AAQtB,IAAMF,uBAAuB,+BAAsB;AAC/CG,UAAM,eADyC;AAE/CC,YAAQ;AACJd,YAAI,iCAAc,eAAd,CADA;AAEJC,eAAO;AACHM,wCADG;AAEHQ,qBAAS,iBAACC,GAAD;AAAA,uBAASA,IAAIf,KAAb;AAAA;AAFN,SAFH;AAMJC,qBAAa;AACTK,wCADS;AAETQ,qBAAS,iBAACC,GAAD;AAAA,uBAASA,IAAId,WAAb;AAAA;AAFA,SANT;AAUJH,iBAAS;AACLQ;AADK;AAVL,KAFuC;AAgB/CU,gBAAY,CAACN,aAAD;AAhBmC,CAAtB,CAA7B;;4BAsBI,yCAAsB;AACtBE,UAAM,eADgB;AAEtBK,cAAUR;AAFY,CAAtB,C;IAFgBS,wB,yBAAhBC,c;IACUC,wB,yBAAVC,Q;;AAMJ,IAAMC,cAAc,+BAAsB;AACtCV,UAAM,MADgC;AAEtCC,YAAQ;AACJd,YAAI,iCAAc,MAAd,CADA;AAEJwB,wBAAgB;AACZjB,kBAAMY,wBADM;AAEZM;AACI1B,yBAAS;AACLQ,gDADK;AAELmB,kCAAc;AAFT;AADb,4CAFY;AASZX,qBAAS,iBAACC,GAAD;AAAA,oBAAOjB,OAAP,QAAOA,OAAP;AAAA,oBAAmB0B,IAAnB;AAAA,uBACL,uCAAoBtB,gBAAgBJ,OAAhB,CAApB,EAA8C0B,IAA9C,CADK;AAAA;AATG;AAFZ;AAF8B,CAAtB,CAApB;;AAmBA,IAAME,QAAQ,+BAAsB;AAChCd,UAAM,OAD0B;AAEhCC,YAAQ;AACJc,gBAAQ;AACJrB,kBAAMgB,WADF;AAEJR,qBAAS;AAAA,uBAAO,EAAP;AAAA;AAFL,SADJ;AAKJc,cAAMjB;AALF;AAFwB,CAAtB,CAAd;;AAWO,IAAMkB,0BAAS,2BAAkB;AACpCC,WAAOJ;AAD6B,CAAlB,CAAf","file":"schema.js","sourcesContent":["import {\r\n    GraphQLBoolean,\r\n    GraphQLID,\r\n    GraphQLInt,\r\n    GraphQLList,\r\n    GraphQLNonNull,\r\n    GraphQLObjectType,\r\n    GraphQLSchema,\r\n    GraphQLString,\r\n} from 'graphql';\r\n\r\nimport {\r\n    connectionArgs,\r\n    connectionDefinitions,\r\n    connectionFromArray,\r\n    cursorForObjectInConnection,\r\n    fromGlobalId,\r\n    globalIdField,\r\n    mutationWithClientMutationId,\r\n    nodeDefinitions,\r\n    toGlobalId,\r\n} from 'graphql-relay';\r\n\r\nlet searchTaxItems;\r\n\r\n(function _setupData() {\r\n    searchTaxItems = Array.from(Array(20), (_, index) => {\r\n        const tmp = index % 3;\r\n        let keyword;\r\n        switch (tmp) {\r\n            case 0:\r\n                keyword = 'apple';\r\n                break;\r\n            case 1:\r\n                keyword = 'banana';\r\n                break;\r\n            case 2:\r\n                keyword = 'oringe';\r\n                break;\r\n        }\r\n        return {\r\n            id: index,\r\n            title: `title:${index}`,\r\n            description: `description:${index}`,\r\n            keyword\r\n        }\r\n    })\r\n\r\n})();\r\n\r\nconst _searchTaxItems = keyword => {\r\n    if (!keyword) {\r\n        return searchTaxItems;\r\n    }\r\n    return searchTaxItems.filter(e => e.keyword === keyword);\r\n}\r\n\r\nconst {nodeInterface, nodeField} = nodeDefinitions(\r\n    globalId => {\r\n        const {type, id} = fromGlobalId(globalId);\r\n        return searchTaxItems.find(e => e.id === Number(id));\r\n    },\r\n    obj => GraphQLSearchTaxItem\r\n);\r\n\r\nconst GraphQLSearchTaxItem = new GraphQLObjectType({\r\n    name: 'SearchTaxItem',\r\n    fields: {\r\n        id: globalIdField('SearchTaxItem'),\r\n        title: {\r\n            type: GraphQLString,\r\n            resolve: (obj) => obj.title,\r\n        },\r\n        description: {\r\n            type: GraphQLString,\r\n            resolve: (obj) => obj.description,\r\n        },\r\n        keyword: {\r\n            type: GraphQLString\r\n        },\r\n    },\r\n    interfaces: [nodeInterface],\r\n});\r\n\r\nconst {\r\n    connectionType: SearchTaxItemsConnection,\r\n    edgeType: GraphQLSearchTaxItemEdge,\r\n} = connectionDefinitions({\r\n    name: 'SearchTaxItem',\r\n    nodeType: GraphQLSearchTaxItem,\r\n});\r\n\r\nconst GraphQLUser = new GraphQLObjectType({\r\n    name: 'User',\r\n    fields: {\r\n        id: globalIdField('User'),\r\n        searchTaxClass: {\r\n            type: SearchTaxItemsConnection,\r\n            args: {\r\n                keyword: {\r\n                    type: GraphQLString,\r\n                    defaultValue: '',\r\n                },\r\n                ...connectionArgs,\r\n            },\r\n            resolve: (obj, {keyword, ...args}) =>\r\n                connectionFromArray(_searchTaxItems(keyword), args),\r\n        },\r\n    }\r\n});\r\n\r\nconst Query = new GraphQLObjectType({\r\n    name: 'Query',\r\n    fields: {\r\n        viewer: {\r\n            type: GraphQLUser,\r\n            resolve: () => ({}),\r\n        },\r\n        node: nodeField,\r\n    },\r\n});\r\n\r\nexport const schema = new GraphQLSchema({\r\n    query: Query\r\n});"]}